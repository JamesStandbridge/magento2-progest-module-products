<?php
/**
 * Copyright Â© Boeki - This file has been generated by the Boeki Module Core
 * 
 * @author    Boeki (https://boeki.fr/)
 * @copyright Boeki
 */

namespace Progest\Products\Cron;

use Boeki\Core\Framework\Helper;
use Progest\Products\Service\JobHandler;


class Products
{
    private JobHandler $handler;

    public function __construct(
        JobHandler $handler
    ) {
        $this->activate = "1"; // <- set here your activate variable from config value
        $this->handler = $handler;
    }

    public function execute() {
        try {
            if ($this->activate === "1") {
                $this->logger = self::startLogger(BP."/var/log/progest_log.log"); // <- set here your LOG_PATH
                $this->handler->setLogger($this->logger);
                $this->logger->info("----------------------------------");
                $this->logger->info("Start ".self::class." Cron");
            } else {
                $this->logger->info("Not activated.");
            }

            $number_new_processed = $this->handler->handleNewProducts();
            $this->logger->info(sprintf("Number of new products successfully processed : %s",$number_new_processed));

            $number_cold_processed = $this->handler->handleColdUpdateProducts();
            $this->logger->info(sprintf("Number of products with a successful cold data update : %s",$number_cold_processed));

            $number_hot_processed = $this->handler->handleHotUpdateProducts();
            $this->logger->info(sprintf("Number of products with a successful hot data update : %s",$number_hot_processed));

            //$this->logger->info(count($res));

            $this->logger->info("End of ".self::class." Cron");
            $this->logger->info("----------------------------------");
        } catch (\Exception $e) {
            $this->logger->info($e->getMessage());
            throw $e;
        }
    }

    private static function startLogger(string $path) {
        try {
            // Create directory if not exists
            $check = Helper::checkOrCreateDir($path);

            // Start logger
            $writer = new \Zend\Log\Writer\Stream( $path );
            $logger = new \Zend\Log\Logger();
            $logger->addWriter($writer);
            $check['dirC'] ? $logger->info("Directory : '" . $check['dir'] . "' created.") : '';
            return $logger;
        } catch (\Exception $e) {
            var_dump($e->getMessage());
        }
    }
}